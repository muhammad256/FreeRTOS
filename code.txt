// main.c
// Runs on LM4F120 or TM4C123
// C2_Toggle_PF1, toggles PF1 (red LED) at 5 Hz

// LaunchPad built-in hardware
// SW1 left switch is negative logic PF4 on the Launchpad
// SW2 right switch is negative logic PF0 on the Launchpad
// red LED connected to PF1 on the Launchpad
// blue LED connected to PF2 on the Launchpad
// green LED connected to PF3 on the Launchpad


#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R       (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R         (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))
#define PF4                     (*((volatile unsigned long *)0x40025040))
#define PF3                     (*((volatile unsigned long *)0x40025020))
#define PF2                     (*((volatile unsigned long *)0x40025010))
#define PF1                     (*((volatile unsigned long *)0x40025008))
#define PF0                     (*((volatile unsigned long *)0x40025004))
#define GPIO_PORTF_DR2R_R       (*((volatile unsigned long *)0x40025500))
#define GPIO_PORTF_DR4R_R       (*((volatile unsigned long *)0x40025504))
#define GPIO_PORTF_DR8R_R       (*((volatile unsigned long *)0x40025508))
#define GPIO_LOCK_KEY           0x4C4F434B  // Unlocks the GPIO_CR register
#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))

void PortF_Init(void){
volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;     // 1) activate clock for Port F
  delay = SYSCTL_RCGC2_R;           // allow time for clock to start
  GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock GPIO Port F
  GPIO_PORTF_CR_R = 0x1F;           // allow changes to PF4-0
  // only PF0 needs to be unlocked, other bits can't be locked
  GPIO_PORTF_AMSEL_R = 0x00;        // 3) disable analog on PF
  GPIO_PORTF_PCTL_R = 0x00000000;   // 4) PCTL GPIO on PF4-0
  GPIO_PORTF_DIR_R = 0x0E;          // 5) PF4,PF0 in, PF3-1 out
  GPIO_PORTF_AFSEL_R = 0x00;        // 6) disable alt funct on PF7-0
  GPIO_PORTF_PUR_R = 0x11;          // enable pull-up on PF0 and PF4
  GPIO_PORTF_DEN_R = 0x1F;          // 7) enable digital I/O on PF4-0
}


#include <String.h>
#include <FreeRTOS.h>
#include <semphr.h>
#include <timers.h>
#include <task.h>




void Delay(void){
unsigned long volatile time;
  time = 1045448;  // 0.1sec
while(time){
time--;
}
}

// semaphore hadler defintion for each task
SemaphoreHandle_t SBrake;
SemaphoreHandle_t STemp;
SemaphoreHandle_t SIdle;
SemaphoreHandle_t Sswitch;

// task to control our tasks
void Switch1 (void * para)
{
Sswitch = xSemaphoreCreateBinary();
xSemaphoreTake( Sswitch, (TickType_t)0 ); //intilaize it
//uint32_t i = 0;
while(1)
{
xSemaphoreTake( Sswitch, (TickType_t)portMAX_DELAY );

PF4 = GPIO_PORTF_DATA_R&0x10; // read PF4 into SW1
PF0= GPIO_PORTF_DATA_R&0x01;

if (!PF0) // switch 2 (brake) is on
{
xSemaphoreGive(SBrake);

}
else if(((PF0)&&(!PF4)))  // switch 1 (Temp) is on and 2 (Brake) is off
{
xSemaphoreGive(STemp);
}
else
{
xSemaphoreGive(SIdle);

}
}
}


void Brake (void * para)
{

SBrake = xSemaphoreCreateBinary();
xSemaphoreTake( SBrake, (TickType_t)0 ); //intilaize it
//uint32_t i = 0;
while(1)
{
xSemaphoreTake( SBrake, (TickType_t)portMAX_DELAY );

GPIO_PORTF_DATA_R = 0x02; //LED is red
Delay();
xSemaphoreGive(Sswitch);
}

}

xTaskHandle CondHandler;
void Temp (void * para)
{
unsigned portBASE_TYPE uxPriority;
const char* pcTaskName= "Task 1 is running\r\n";
unsigned ux1;
// volatile uint32_t* u1;

STemp = xSemaphoreCreateBinary();
xSemaphoreTake( STemp, (TickType_t)0 ); //intilaize it
//uint32_t i = 0;
while(1)
{
xSemaphoreTake( STemp, (TickType_t)portMAX_DELAY );
GPIO_PORTF_DATA_R = 0x04; //LED is blue
Delay();
Delay();

uxPriority = uxTaskPriorityGet(NULL); // get priority of current task
vTaskPrioritySet(CondHandler, (uxPriority+1));
ux1++;
}
}

void Cond (void * para)
{
unsigned portBASE_TYPE uxPriority;
unsigned ux2;
uxPriority = uxTaskPriorityGet(NULL);

while(1)
{
if(((PF0)&&(!PF4))) // switch of brake is off and switch of temp is on
{
GPIO_PORTF_DATA_R = 0x08; // led is green
Delay();
}
else
{
vTaskPrioritySet(NULL, (uxPriority-2));
ux2++;
//xSemaphoreGive(Sswitch);
}
}
}

void Idle (void * para)
{

while(1)
{

if (((!PF0)|| (!PF4))) // if any switch s pressed go to switch task
{
xSemaphoreGive(Sswitch);
}
else
{
GPIO_PORTF_DATA_R = 0x0A ; //Yellow
Delay();
 GPIO_PORTF_DATA_R = 0x0C ;  //Sky Blue
Delay();
  GPIO_PORTF_DATA_R = 0x06 ;  //Pink
Delay();
}
}
}

int main()
{
TaskHandle_t First_handle,Second_handle,Third_handle,Fourth_handle;
PortF_Init();
xTaskCreate(Switch1,"Switch",128, NULL,5,&First_handle);
xTaskCreate(Brake,"Brake",128, NULL,4,&Second_handle);
xTaskCreate(Temp,"Temp",128, NULL,3,&Third_handle);
xTaskCreate(Cond,"Cond",128, NULL,2,&CondHandler);
xTaskCreate(Idle,"Idle",128, NULL,1,&Fourth_handle);
vTaskStartScheduler();

return 0;
}